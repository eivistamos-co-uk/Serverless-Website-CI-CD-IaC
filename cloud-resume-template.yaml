AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Cloud Resume Challenge stack: S3 (private) + CloudFront + Route53 + DynamoDB + Lambda (Python) + API Gateway (CORS) + CloudWatch + SNS.

Parameters:
  DomainName:
    Type: String
  HostedZoneId:
    Type: String
  ACMCertificateArn:
    Type: String
  AllowedCorsOrigin:
    Type: String
  EmailForAlerts:
    Type: String
  StageName:
    Type: String
    Default: prod
  DynamoDBTableName:
    Type: String
    Default: visitor-counter

Resources:

  SiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref DomainName
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${DomainName}-oac"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Aliases: [ !Ref DomainName ]
        Origins:
          - Id: s3origin
            DomainName: !GetAtt SiteBucket.RegionalDomainName
            S3OriginConfig: {}
            OriginAccessControlId: !GetAtt OriginAccessControl.Id
        DefaultCacheBehavior:
          TargetOriginId: s3origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [ GET, HEAD, OPTIONS ]
          CachedMethods: [ GET, HEAD ]
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
          Compress: true
        ViewerCertificate:
          AcmCertificateArn: !Ref ACMCertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021
        HttpVersion: http2
        PriceClass: PriceClass_100
        CustomErrorResponses:
          Quantity: 2
          Items:
            - ErrorCode: 403
              ResponsePagePath: /error.html
              ResponseCode: 403
              ErrorCachingMinTTL: 10
            - ErrorCode: 404
              ResponsePagePath: /error.html
              ResponseCode: 404
              ErrorCachingMinTTL: 10

  SiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref SiteBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowCloudFrontReadViaOAC
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${SiteBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${Distribution}"

  ARecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        HostedZoneId: !Ref HostedZoneId
        DNSName: !GetAtt Distribution.DomainName

  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref DynamoDBTableName
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - !GetAtt DynamoDBTable.Arn


  CounterFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.13
      Handler: index.lambda_handler
      Timeout: 10
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableName
          CORS_ORIGIN: !Ref AllowedCorsOrigin
      Code:
        ZipFile: !Sub |
          import json
          import boto3
          from decimal import Decimal

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('${DynamoDBTableName}')

          def lambda_handler(event, context):
              try:
                  key = {'pk': 'visitor_Count'}
                  response = table.get_item(Key=key)
                  if 'Item' not in response:
                      table.put_item(Item={'pk': 'visitor_Count', 'count': 0})

                  update_response = table.update_item(
                      Key=key,
                      UpdateExpression='ADD #c :inc',
                      ExpressionAttributeNames={'#c': 'count'},
                      ExpressionAttributeValues={':inc': 1},
                      ReturnValues='UPDATED_NEW'
                  )

                  updated_count = int(update_response['Attributes']['count'])

                  return {
                      'statusCode': 200,
                      'headers': {
                          'Content-Type': 'application/json',
                          'Access-Control-Allow-Origin': '${AllowedCorsOrigin}'
                      },
                      'body': json.dumps({'count': updated_count})
                  }

              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {'Content-Type': 'application/json'},
                      'body': json.dumps({'error': str(e)})
                  }

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CounterFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "httpapi-${AWS::StackName}"
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: [ !Ref AllowedCorsOrigin ]

  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CounterFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  ApiRouteCount:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /count"
      Target: !Sub "integrations/${ApiIntegration}"

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref StageName
      AutoDeploy: true

  SNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Alert_Owner
      Subscription:
        - Endpoint: !Ref EmailForAlerts
          Protocol: email

  CloudWatchAlarmAPI:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: APIGatewayErrors
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: ApiId
          Value: !Ref HttpApi
      EvaluationPeriods: 1
      MetricName: 5xx
      Namespace: AWS/ApiGateway
      Period: 300
      Statistic: Sum
      Threshold: 3.0
      TreatMissingData: missing

  CloudWatchAlarmLambda:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: LambdaErrors
      ActionsEnabled: true
      AlarmActions:
        - !Ref SNSTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: ApiId
          Value: !Ref CounterFunction
        - Name: FunctionName
          Value: !Ref CounterFunction
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: 3.0
      TreatMissingData: missing

Outputs:
  WebsiteURL:
    Description: Deployed website URL
    Value: !Sub "https://${DomainName}"
  ApiInvokeURL:
    Description: API endpoint for visitor counter
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/count"
  CloudFrontDistId:
    Description: "CloudFront Distribution ID for the site"
    Value: !Ref Distribution
    Export:
      Name: CloudFrontDistId
