AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Sub-stack for backend: API Gateway, Lambda, IAM roles.

Parameters:
  TemplateBucket:
    Type: String
    Description: S3 Bucket from Deploy Script containing the Lambda code.
  AllowedCorsOrigin:
    Type: String
  StageName:
    Type: String
    Default: prod
  DynamoDBTableName:
    Type: String
    Default: visitor-counter
  DynamoDBTableArn:
    Type: String
  

Resources:

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                Resource:
                  - !Ref DynamoDBTableArn

  CounterFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: VisitorCounter
      Runtime: python3.13
      Handler: lambda_function.lambda_handler
      Timeout: 10
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          TABLE_NAME: !Ref DynamoDBTableName
          CORS_ORIGIN: !Ref AllowedCorsOrigin
      Code:
        S3Bucket: !Ref TemplateBucket
        S3Key: lambda/lambda_function.zip

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CounterFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com

  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub "httpapi-${AWS::StackName}"
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: [ !Ref AllowedCorsOrigin ]

  ApiIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CounterFunction.Arn}/invocations"
      PayloadFormatVersion: "2.0"

  ApiRouteCount:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: "GET /count"
      Target: !Sub "integrations/${ApiIntegration}"

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: !Ref StageName
      AutoDeploy: true

Outputs:
  ApiInvokeURL:
    Description: API endpoint for visitor counter
    Value: !Sub "https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/count"
  HttpApi:
    Value: !Ref HttpApi
  CounterFunction:
    Value: !Ref CounterFunction